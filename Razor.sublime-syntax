%YAML 1.2
---

name: Razor
version: 2 # to match with html
file_extensions: [razor, cshtml]
scope: source.razor
extends: Packages/HTML/HTML.sublime-syntax

variables:
  razor_keywords: '(page|inherits|implements|attribute|using|inject|layout|model|namespace|preservewhitespace|rendermode|section|typeparam)'

  bin_op: '(?:\+|->|-|\*|/|%|\|\||&&|\||&|\^|<<|>>|=>|<=|<|>=|>|==|!=|\?\?)'
  unary_op: '(?:\+\+|--|-|~|!|&|\*)'

  # numbers
  dec_digits: (?:[\d_]*\d)
  dec_exponent: (?:[eE][-+]??{{dec_digits}})
  float_suffix: '[fFdDmM]'
  integer_suffix: '[uU][lL]?|[lL][uU]?'

  # characters
  unicode_char: '(?:\\u\h{4}|\\U\h{8})'
  escaped_char: '(?:\\[abfnrtv"''\\]|{{unicode_char}}|\\x[0-9a-fA-F]{1,4}|\\[0-9]{1,3})'

  visibility: \b(?:public|private|protected|internal|protected\s+internal|file)\b
  base_type: (?:(?:bool|byte|sbyte|char|decimal|double|float|int|uint|nint|nuint|long|ulong|short|ushort|object|string|void)\b)
  type_suffix: (?:\s*(?:\[,*\]|\*|\?)*)
  generic_declaration: \s*(<[^={};]*>)?\s*

  brackets_capture: '((\[)(,*)(\]))'
  type_suffix_capture: '(\?)?{{brackets_capture}}?(?:\s*(\*))?'

  reserved: '(?:abstract|as|base|break|case|catch|checked|class|const|continue|default|delegate|do|else|enum|event|explicit|extern|finally|fixed|for|foreach|goto|if|implicit|in|interface|internal|is|lock|nameof|namespace|new|not|null|operator|out|override|params|private|protected|public|readonly|ref|required|return|sealed|sizeof|stackalloc|static|string|struct|switch|this|throw|try|typeof|unchecked|unsafe|using|virtual|volatile|while)'
  name: '(?:@{{reserved}}|@{{base_type}}|@var|@?{{name_normal}})'
  namespaced_name: (?:(?:{{name}}{{generic_declaration}}\s*\.\s*)*{{name}}{{generic_declaration}})

  start_char: '(?:{{unicode_char}}|[_\p{L}])'
  other_char: '(?:{{unicode_char}}|[_0-9\p{L}])'
  name_normal: '{{start_char}}{{other_char}}*\b'
  cap_name: '(\p{Lu}{{other_char}})'

contexts:
  main:
    - meta_prepend: true
    - match: '@\*'
      scope: punctuation.definition.comment.begin
      push:
        - meta_scope: comment.block
        - match: '\*@'
          scope: punctuation.definition.comment.end
          pop: true
    - match: '@@'
      scope: constant.character.escape
    - match: '@\('
      scope: punctuation.definition
      push: end_bracket
    - match: '@(code|functions)?\s*{'
      scope: punctuation.definition
      push: end_curly_bracket
    - match: '(@)(?=for|foreach|while|do|switch|if|try|lock)'
      captures:
        1: punctuation.definition
      push: scope:source.cs#line_of_code
      with_prototype:
        - include: inline_html
    - include: match_keywords

  match_keywords:
    - match: '\b(using)\s+(?=var\b)'
      captures:
        1: punctuation.definition
      push: scope:source.cs#var_declaration
    - match: '\b(using)\s+(?={{name}}\s+{{name}}\s*=)'
      captures:
        1: punctuation.definition
      push: scope:source.cs#var_declaration
    - match: '\b(using)\s+(?={{name}}\s*=)'
      captures:
        1: punctuation.definition
      push: scope:source.cs#using_namespace
    - match: '\b(using)(?:\s+(static)|(?!\s*\())\b'
      captures:
        1: punctuation.definition
        2: keyword.control.import.cs
      push: scope:source.cs#using_namespace
    - match: '(@typeparam)\s+(\w+)'
      captures:
        1: punctuation.definition
        2: variable.annotation.cs
      push: scope:source.cs#type_constraint
      with_prototype:
        - match: '(?=\n)'
          pop: true
    - match: '@attribute'
      scope: punctuation.definition
      push: scope:source.cs#attribute
      with_prototype:
        - match: '(?=\n)'
          pop: true
    - match: '@(implements|inherits)'
      scope: punctuation.definition
      push: scope:source.cs#var_declaration
      with_prototype:
        - match: '(?=\n)'
          pop: true
    - match: '@{{razor_keywords}}'
      scope: punctuation.definition
      push: scope:source.cs#main
      with_prototype:
        - match: '(?=\n)'
          pop: true
    - match: '(@)(?=\w)'
      scope: punctuation.definition

  inline_html:
    - match: '(@?)(?=<\w>)'
      captures:
        1: punctuation.definition
      push: scope:source.razor#main
      with_prototype:
        - match: '(?=\n)'
          pop: true

  end_curly_bracket:
    - match: '}'
      scope: punctuation.definition
      pop: true
    - include: inline_html
    - include: scope:source.cs#main

  end_bracket:
    - match: '\)'
      scope: punctuation.definition
      pop: true
    - include: inline_html
    - include: scope:source.cs#main
